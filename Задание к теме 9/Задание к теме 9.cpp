#include <iostream>
#define _USE_MATH_DEFINES
#include <math.h>
#include <cmath>
#include <time.h>
#include <ctime>
using namespace std;

int main()
{
	setlocale(LC_ALL, "");

	// 1. С начала суток прошло N секунд (N — целое). Найти количество секунд, прошедших с начала последней минуты.
	int N, LastSec;
	const int SecInDay = 86400;
	//  N - данные нам секунды
	srand(time(NULL));
	N = 45135; // Соответсвует времени 12:32:15
	cout << "Секунд прошло с начала суток (почти случайная величина) = " << N << endl;
	LastSec = N % 60;
	cout << "Требуемая величина = " << LastSec << endl << endl;

	/* 2.Дни недели пронумерованы следующим образом: 0 — воскресенье, 1 — понедельник, 2 — вторник, . . . , 6 — суббота. 
	Дано целое число K, лежащее в диапазоне 1–365. 
	Определить номер дня недели для K-го дня года, если известно, что в этом году 1 января было понедельником.
	*/
	int K, day;
	K = 22;
	day = K % 7;
	cout << "Номер дня недели = " << day << endl << endl;

	// 3. Дни недели пронумерованы следующим образом: 1 — понедельник, 2 — вторник, . . . , 6 — суббота, 7 — воскресенье.
	//Дано целое число K, лежащее в диапазоне 1–365, и целое число N, лежащее в диапазоне 1–7. 
	//Определить номер дня недели для K-го дня года, если известно, что в этом году 1 января было днем недели с номером N
	K = 9;
	N = 6;
	day = (K % 7)+N-1;
	cout << "Номер дня недели, при N = "<< N << ", а K = "<< K << endl << "Равен:" << day << endl << endl;

	// 4. Даны целые положительные числа A, B, C. 
	//На прямоугольнике размера A × B размещено максимально возможное количество квадратов со стороной C (без наложений). 
	//Найти количество квадратов, размещенных на прямоугольнике, а также площадь незанятой части прямоугольника. 
	int A, B, C, SquareA, SquareB, Area;
	A = 17; B = 13; C = 2;
	SquareA = A / C; SquareB = B / C;
	cout << "Количество квадратов = " << SquareA * SquareB << endl;
	cout << "Незанятая площадь = " << (A * B) - (SquareA * SquareB * pow(C,2)) << endl << endl;

	// 5. Дан номер некоторого года (целое положительное число). 
	//Определить соответствующий ему номер столетия, учитывая, что, к примеру, началом 20 столетия был 1901 год
	int year, hundred;
	year = 1901;
	hundred = (year - 1) / 100; // номер столетия
	cout << hundred;

}
